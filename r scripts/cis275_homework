#2. Load the dataset.
setwd("C:/Users/rob/Documents/R scripts")
getwd()
churn <- read.csv("Telco-Customer-Churn.csv")
str(churn)
table(churn$Churn)
prop.table(table(churn$Churn))

#3. Train-test split of the data.
set.seed(123)
train_sample <- sample(1:nrow(churn),size = 5000)
churn_train <- churn[train_sample,]
churn_test <- churn[-train_sample,]
prop.table(table(churn_train$Churn))
prop.table(table(churn_test$Churn))

#4. Create the decision tree model.
library(C50)
churn_model <- C5.0(churn_train[,-20], churn_train$Churn)
summary(churn_model)
plot(churn_model)

#5. Evaluate model performance on test data
library(gmodels)
churn_pred <- predict(churn_model, churn_test)
CrossTable(churn_test$Churn, churn_pred,
           prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
           dnn = c('actual churn', 'predicted churn'))

#6. Improve model performacne by boosting.
churn_boost10 <- C5.0(churn_train[,-20], churn_train$Churn, trials = 10)
summary(churn_boost10)
churn_boost10_pred <- predict(churn_boost10, churn_test)
CrossTable(churn_test$Churn,churn_boost10_pred,
           prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
           dnn = c('actual churn','predicted churn'))


###HOMEWORK 2###


#1. Run all code youcreated in Homework Assignment 1.

#2. Parameter tuning
install.packages("ipred")
install.packages("caret")
library(caret)
library(ipred)
ctrl <- trainControl(method = "cv", number = 5,
                     selectionFunction = "oneSE")
grid <- expand.grid(model = "tree",
                    trials = c(1, 3, 5, 7, 9),
                    winnow = FALSE)
set.seed(123)
  ##install.packages("e1071")
  ##library(e1071)
churn_tuned <- train(Churn ~ ., data = churn_train, 
                           method = "C5.0",
                           metric = "Kappa",
                           trControl = ctrl,
                           tuneGrid = grid)
churn_tuned_pred <- predict(churn_tuned, churn_test)
confusionMatrix(churn_tuned_pred, churn_test$Churn)

#3. Bagging
library(ipred)
set.seed(123)
churn_bag <- bagging(Churn ~ ., data = churn_train, nbagg = 25)
churn_bag_pred <- predict(churn_bag, churn_test)
confusionMatrix(churn_bag_pred, churn_test$Churn)

#4. Tuned bagging
churn_bag_tuned <- train(Churn ~ ., data = churn_train, 
                          method = "treebag",
                          trControl = ctrl)
churn_bag_tuned_pred <- predict(churn_bag_tuned, churn_test)
confusionMatrix(churn_bag_tuned_pred, churn_test$Churn)

#5. Random forests
  install.packages("randomForest")
library(randomForest)
set.seed(123)
churn_rf <- randomForest(Churn ~ ., data = churn_train)
churn_rf_pred <- predict(churn_rf, churn_test)
confusionMatrix(churn_rf_pred, churn_test$Churn)

#6. Tuned random Forests
grid_rf <- expand.grid(mtry = c(4,8,12,16,20))
churn_rf_tuned <- train(Churn ~ ., 
                         data = churn_train, 
                         method = "rf", 
                         trControl = ctrl,
                         tuneGrid = grid_rf)
churn_rf_tuned_pred <- predict(churn_rf_tuned, churn_test)
confusionMatrix(churn_rf_tuned_pred, churn_test$Churn)

#7. Roc curve
library(pROC)
churn_prob <- predict(churn_model, churn_test,type = "prob")
churn_tuned_rf_prob <- predict(churn_rf_tuned, churn_test,type = "prob")
churn_bag_prob  <- predict(churn_bag, churn_test,type = "prob")

roc_churn <- roc(churn_test$Churn,churn_prob[,2],plot = TRUE, print.auc = TRUE)
roc_tuned_rf <- roc(churn_test$Churn,churn_tuned_rf_prob[,2], 
               plot = TRUE, print.auc = TRUE,print.auc.y = 0.8,
               col = "red")
roc_bag <- roc(churn_test$Churn,churn_bag_prob[,2], 
                    plot = TRUE, print.auc = TRUE,print.auc.y = 0.8,
                    col = "blue", add = TRUE)

getwd()
setwd("C:/Users/rob/Documents/R scripts")
nba <- read.csv("nba_logreg_clean.csv")
str(nba)
table(nba$TARGET_5Yrs)
prop.table(table(nba$TARGET_5Yrs))

train_sample <- sample(1:nrow(nba),size = 500)
nba_train <- nba[train_sample,]
nba_test <- nba[-train_sample,]

install.packages("randomForest")
library(randomForest)
set.seed(100)
nba_rf <- randomForest(TARGET_5Yrs ~ ., data = nba_train)
nba_rf_pred <- predict(nba_rf, nba_test)
confusionMatrix(nba_rf_pred, nba_test$TARGET_5Yrs)
